//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/@ Project/Systems/Subsystem - InputSystem/GameInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace OTDS.Input
{
    public partial class @GameInputs : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @GameInputs()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameInputs"",
    ""maps"": [
        {
            ""name"": ""NoInput"",
            ""id"": ""19d7a0a8-9ff5-468b-88b6-a010ab5fc028"",
            ""actions"": [],
            ""bindings"": []
        },
        {
            ""name"": ""Character"",
            ""id"": ""bc9808bf-33df-48bc-8f0c-bea67a904788"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""cd5c2385-0162-47d4-aeab-2e13ef138015"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""AimPosition"",
                    ""type"": ""Value"",
                    ""id"": ""6daa28a1-4e04-4321-b1cc-06768cce2a9e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""41de2558-a2d5-4af6-b36d-d0bf153dd1ba"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ToggleWeapon"",
                    ""type"": ""Button"",
                    ""id"": ""90eaa838-ac19-43ff-871a-b2157402bd0e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""wasd"",
                    ""id"": ""47e952d0-8df6-4f2c-9f1f-9950e56d7337"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""8058c0fd-d2f7-48d0-91c0-0453c65aae3a"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""fc241f98-b70d-4537-ba1c-7de889afb3b3"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""d86c7cc5-2529-4ffa-9bd9-d6cc32180db6"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""93b8a7fb-3e0a-400d-aa1d-94ebe167bbee"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""arrows"",
                    ""id"": ""d2fc6ac3-a5a8-499a-b600-e46665bc0a69"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""d389473f-513b-48b8-9fd4-abcd2b432f86"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""0acfcdbf-1717-444a-a9cc-b54447b53cdb"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""bdc00de9-62be-41e1-89d0-c68215a1a35e"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""9637cd39-d125-4713-b67a-a81ca0aa9f30"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""7e7c125e-6a59-4715-915c-fad36f515d5a"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AimPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4fbbdb8d-60a7-45c5-8b1a-7452edd78234"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""b2c5e7b2-6198-4f1e-a0d3-596fd0af344d"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleWeapon"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""e89bc0be-a187-49a0-99e5-b918b3250769"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleWeapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""72875223-9d07-4a44-b17b-2b60b9d16067"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleWeapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""UI"",
            ""id"": ""8c059f31-79bd-48f4-8ffa-305fd8a08a71"",
            ""actions"": [],
            ""bindings"": []
        }
    ],
    ""controlSchemes"": []
}");
            // NoInput
            m_NoInput = asset.FindActionMap("NoInput", throwIfNotFound: true);
            // Character
            m_Character = asset.FindActionMap("Character", throwIfNotFound: true);
            m_Character_Movement = m_Character.FindAction("Movement", throwIfNotFound: true);
            m_Character_AimPosition = m_Character.FindAction("AimPosition", throwIfNotFound: true);
            m_Character_Shoot = m_Character.FindAction("Shoot", throwIfNotFound: true);
            m_Character_ToggleWeapon = m_Character.FindAction("ToggleWeapon", throwIfNotFound: true);
            // UI
            m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // NoInput
        private readonly InputActionMap m_NoInput;
        private INoInputActions m_NoInputActionsCallbackInterface;
        public struct NoInputActions
        {
            private @GameInputs m_Wrapper;
            public NoInputActions(@GameInputs wrapper) { m_Wrapper = wrapper; }
            public InputActionMap Get() { return m_Wrapper.m_NoInput; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(NoInputActions set) { return set.Get(); }
            public void SetCallbacks(INoInputActions instance)
            {
                if (m_Wrapper.m_NoInputActionsCallbackInterface != null)
                {
                }
                m_Wrapper.m_NoInputActionsCallbackInterface = instance;
                if (instance != null)
                {
                }
            }
        }
        public NoInputActions @NoInput => new NoInputActions(this);

        // Character
        private readonly InputActionMap m_Character;
        private ICharacterActions m_CharacterActionsCallbackInterface;
        private readonly InputAction m_Character_Movement;
        private readonly InputAction m_Character_AimPosition;
        private readonly InputAction m_Character_Shoot;
        private readonly InputAction m_Character_ToggleWeapon;
        public struct CharacterActions
        {
            private @GameInputs m_Wrapper;
            public CharacterActions(@GameInputs wrapper) { m_Wrapper = wrapper; }
            public InputAction @Movement => m_Wrapper.m_Character_Movement;
            public InputAction @AimPosition => m_Wrapper.m_Character_AimPosition;
            public InputAction @Shoot => m_Wrapper.m_Character_Shoot;
            public InputAction @ToggleWeapon => m_Wrapper.m_Character_ToggleWeapon;
            public InputActionMap Get() { return m_Wrapper.m_Character; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(CharacterActions set) { return set.Get(); }
            public void SetCallbacks(ICharacterActions instance)
            {
                if (m_Wrapper.m_CharacterActionsCallbackInterface != null)
                {
                    @Movement.started -= m_Wrapper.m_CharacterActionsCallbackInterface.OnMovement;
                    @Movement.performed -= m_Wrapper.m_CharacterActionsCallbackInterface.OnMovement;
                    @Movement.canceled -= m_Wrapper.m_CharacterActionsCallbackInterface.OnMovement;
                    @AimPosition.started -= m_Wrapper.m_CharacterActionsCallbackInterface.OnAimPosition;
                    @AimPosition.performed -= m_Wrapper.m_CharacterActionsCallbackInterface.OnAimPosition;
                    @AimPosition.canceled -= m_Wrapper.m_CharacterActionsCallbackInterface.OnAimPosition;
                    @Shoot.started -= m_Wrapper.m_CharacterActionsCallbackInterface.OnShoot;
                    @Shoot.performed -= m_Wrapper.m_CharacterActionsCallbackInterface.OnShoot;
                    @Shoot.canceled -= m_Wrapper.m_CharacterActionsCallbackInterface.OnShoot;
                    @ToggleWeapon.started -= m_Wrapper.m_CharacterActionsCallbackInterface.OnToggleWeapon;
                    @ToggleWeapon.performed -= m_Wrapper.m_CharacterActionsCallbackInterface.OnToggleWeapon;
                    @ToggleWeapon.canceled -= m_Wrapper.m_CharacterActionsCallbackInterface.OnToggleWeapon;
                }
                m_Wrapper.m_CharacterActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Movement.started += instance.OnMovement;
                    @Movement.performed += instance.OnMovement;
                    @Movement.canceled += instance.OnMovement;
                    @AimPosition.started += instance.OnAimPosition;
                    @AimPosition.performed += instance.OnAimPosition;
                    @AimPosition.canceled += instance.OnAimPosition;
                    @Shoot.started += instance.OnShoot;
                    @Shoot.performed += instance.OnShoot;
                    @Shoot.canceled += instance.OnShoot;
                    @ToggleWeapon.started += instance.OnToggleWeapon;
                    @ToggleWeapon.performed += instance.OnToggleWeapon;
                    @ToggleWeapon.canceled += instance.OnToggleWeapon;
                }
            }
        }
        public CharacterActions @Character => new CharacterActions(this);

        // UI
        private readonly InputActionMap m_UI;
        private IUIActions m_UIActionsCallbackInterface;
        public struct UIActions
        {
            private @GameInputs m_Wrapper;
            public UIActions(@GameInputs wrapper) { m_Wrapper = wrapper; }
            public InputActionMap Get() { return m_Wrapper.m_UI; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
            public void SetCallbacks(IUIActions instance)
            {
                if (m_Wrapper.m_UIActionsCallbackInterface != null)
                {
                }
                m_Wrapper.m_UIActionsCallbackInterface = instance;
                if (instance != null)
                {
                }
            }
        }
        public UIActions @UI => new UIActions(this);
        public interface INoInputActions
        {
        }
        public interface ICharacterActions
        {
            void OnMovement(InputAction.CallbackContext context);
            void OnAimPosition(InputAction.CallbackContext context);
            void OnShoot(InputAction.CallbackContext context);
            void OnToggleWeapon(InputAction.CallbackContext context);
        }
        public interface IUIActions
        {
        }
    }
}
